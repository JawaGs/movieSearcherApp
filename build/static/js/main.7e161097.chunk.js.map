{"version":3,"sources":["component/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","uri","concat","this","props","movie","id","react_default","a","createElement","key","className","src","poster_src","alt","width","title","overview","href","target","rel","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","query","value","performSearch","state","searchTerm","console","log","fetch","json","data","results","movieRows","forEach","poster_path","movieRow","MovieRow_MovieRow","push","setState","rows","_context","t0","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEqBA,0LAGb,IAAMC,EAAG,oCAAAC,OAAwCC,KAAKC,MAAMC,MAAMC,IAClE,OACIC,EAAAC,EAAAC,cAAA,SAAOC,IAAMP,KAAKC,MAAMC,MAAMC,GAAKK,UAAU,aAC7CJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QACZJ,EAAAC,EAAAC,cAAA,OAAKG,IAAMT,KAAKC,MAAMC,MAAMQ,WAAaC,IAAI,SAASC,MAAM,SAE9DR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAMN,KAAKC,MAAMC,MAAMW,OACvBT,EAAAC,EAAAC,cAAA,SAAKN,KAAKC,MAAMC,MAAMY,UACtBV,EAAAC,EAAAC,cAAA,KAAGS,KAAOjB,EAAMkB,OAAO,SAASC,IAAI,sBAAsBT,UAAU,mBAApE,mBAdoBU,cC4DvBC,cAzDb,SAAAA,EAAalB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAOC,KA0BPyB,aAAe,SAAEC,GACf,IAAMC,EAAQD,EAAEX,OAAOa,MACvBT,EAAKU,cAAeF,IA3BtBR,EAAKW,MAAQ,GAEbX,EAAKU,gBAJaV,qHAOCY,sFAClBC,QAAQC,IAAK,kDAEOC,MAAM,4FAA4FH,iBAA/GlC,kBACaA,EAAIsC,cAAjBC,SACAC,EAAUD,EAAKC,QACjBC,EAAY,GAChBD,EAAQE,QAAS,SAAEtC,GACjBA,EAAMQ,WAAN,kCAAAX,OAAqDG,EAAMuC,aAC3D,IAAMC,EAAWtC,EAAAC,EAAAC,cAACqC,EAAD,CAAUpC,IAAML,EAAMC,GAAKD,MAAQA,IACpDqC,EAAUK,KAAMF,KAEjB1C,KAAK6C,SAAU,CAAEC,KAAMP,IACxBN,QAAQC,IAAK,4EAEXD,QAAQC,IAARa,EAAAC,IACAf,QAAQC,IAAK,sKAWjB,OACE9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKM,MAAM,KAAKH,IAAI,kIAAkIE,IAAI,MAE5JP,EAAAC,EAAAC,cAAA,MAAIM,MAAM,MACVR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kCAMRF,EAAAC,EAAAC,cAAA,SAAO2C,SAAWjD,KAAK0B,aAAelB,UAAU,wBAAwB0C,YAAY,sBAClFlD,KAAK+B,MAAMe,aApDH5B,aCQEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e161097.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class MovieRow extends Component{ \n    \n    render(){ \n        const uri = `https://www.themoviedb.org/movie/${ this.props.movie.id }`\n        return( \n            <table key={ this.props.movie.id } className='container'>\n            <tbody >\n              <tr >\n                <td className='my-5'>\n                  <img src={ this.props.movie.poster_src } alt='poster' width='120' />\n                </td>\n                <td>\n                  <h3>{ this.props.movie.title }</h3>\n                  <p>{ this.props.movie.overview }</p>\n                  <a href={ uri } target='_blank' rel=\"noopener noreferrer\" className='btn btn-success' >View</a>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n         )\n     }\n }","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './component/MovieRow';\n\nclass App extends Component {\n  constructor( props ){ \n    super( props );\n    this.state = { }\n    \n    this.performSearch()\n   }\n\n   async performSearch(searchTerm){ \n     console.log( 'Perform search using MovieDB' )\n     try{ \n      const uri =  await fetch('https://api.themoviedb.org/3/search/movie?api_key=3ec3cb61329ff7e52ea7e15e5311d341&query='+searchTerm )\n      const data = await uri.json()\n      const results = data.results\n      let movieRows = []\n      results.forEach( ( movie ) =>{ \n        movie.poster_src = `https://image.tmdb.org/t/p/w185${movie.poster_path}`\n        const movieRow = <MovieRow key={ movie.id } movie={ movie }/>\n        movieRows.push( movieRow )\n       } )\n       this.setState( { rows: movieRows } )\n      console.log( 'Fetching data Complete' )\n      }catch(e){ \n        console.log( e )\n        console.log( 'Failed to Fetch data' )\n       }\n    }\n\n    handleChange = ( e ) =>{ \n      const query = e.target.value\n      this.performSearch( query )\n      \n     }\n\n  render(){ \n    return (\n      <div className=\"App\">\n        <table className='titleBar'>\n          <tbody>\n            <tr>\n              <td>\n                <img width='50' src='https://www.themoviedb.org/assets/2/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg' alt=''/>\n              </td>\n              <td width='8'/>\n              <td>\n                <h1> MoviesDB Search</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n  \n        <input onChange={ this.handleChange } className='searchInput container' placeholder='Enter search term'/>\n        { this.state.rows }\n      </div>\n    );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}